using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using OfficeOpenXml;

class Program
{
    static async Task Main(string[] args)
    {
        // Ask for the input file path
        Console.WriteLine("Enter the full path of the Excel file containing the search IDs:");
        string excelFilePath = Console.ReadLine();

        if (!File.Exists(excelFilePath))
        {
            Console.WriteLine("Error: Excel file not found at the specified path.");
            return;
        }

        // Ask for the GitHub token
        Console.WriteLine("Enter your GitHub Personal Access Token:");
        string token = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(token))
        {
            Console.WriteLine("Error: GitHub token cannot be empty.");
            return;
        }

        // Ask for the output directory
        Console.WriteLine("Enter the directory where the output Excel file should be saved:");
        string outputDirectory = Console.ReadLine();

        if (!Directory.Exists(outputDirectory))
        {
            Console.WriteLine("Error: Output directory does not exist.");
            return;
        }

        Console.WriteLine("Reading IDs from Excel file...");
        var ids = ReadIdsFromExcel(excelFilePath);
        int batchSize = 5;  // Number of IDs to process in a single batch

        Console.WriteLine("Searching GitHub for IDs...");
        var allResults = new List<SearchResultWithId>();

        for (int i = 0; i < ids.Count; i += batchSize)
        {
            var batch = ids.GetRange(i, Math.Min(batchSize, ids.Count - i));
            Console.WriteLine($"Processing batch {i / batchSize + 1}: {string.Join(", ", batch)}");

            foreach (var id in batch)
            {
                Console.WriteLine($"Searching for ID: {id}");
                var results = await SearchGitHub(id, token);

                if (results.Count == 0) // No results found, add a null entry
                {
                    allResults.Add(new SearchResultWithId
                    {
                        Id = id,
                        Repository = new Repository { FullName = "NULL" },
                        Path = "NULL",
                        Url = "NULL"
                    });
                }
                else
                {
                    foreach (var result in results)
                    {
                        allResults.Add(new SearchResultWithId
                        {
                            Id = id,
                            Repository = result.Repository,
                            Path = result.Path,
                            Url = result.Url
                        });
                    }
                }
            }
        }

        Console.WriteLine("Writing results to Excel...");
        string outputFilePath = Path.Combine(outputDirectory, "GitHubSearchResults.xlsx");
        WriteResultsToExcel(allResults, outputFilePath);

        Console.WriteLine($"Results written to {outputFilePath}");
    }

    /// <summary>
    /// Reads a list of IDs from an Excel file.
    /// </summary>
    static List<string> ReadIdsFromExcel(string excelFilePath)
    {
        var ids = new List<string>();

        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage(new FileInfo(excelFilePath)))
        {
            var worksheet = package.Workbook.Worksheets[0];
            int rows = worksheet.Dimension.Rows;

            for (int row = 1; row <= rows; row++)
            {
                var cellValue = worksheet.Cells[row, 1].Text;
                if (!string.IsNullOrEmpty(cellValue))
                {
                    ids.Add(cellValue);
                }
            }
        }

        return ids;
    }

    /// <summary>
    /// Searches GitHub for a given query using the API and handles rate limiting.
    /// </summary>
    static async Task<List<SearchResult>> SearchGitHub(string query, string token)
    {
        const int perPage = 100;
        int page = 1;
        var allResults = new List<SearchResult>();
        int retryDelay = 5; // Initial wait time in seconds

        using (HttpClient client = new HttpClient())
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            client.DefaultRequestHeaders.Add("User-Agent", "CSharp-Console-App");

            while (true)
            {
                string url = $"https://api.github.com/search/code?q={query}+user:charlesschwab&per_page={perPage}&page={page}";
                var response = await client.GetAsync(url);
                int statusCode = (int)response.StatusCode;

                if (!response.IsSuccessStatusCode)
                {
                    if (statusCode == 429) // Too Many Requests
                    {
                        Console.WriteLine($"Rate limit exceeded. Retrying in {retryDelay} seconds...");
                        await Task.Delay(retryDelay * 1000);
                        retryDelay *= 2; // Exponential backoff
                        continue;
                    }
                    else if (statusCode == 403) // Forbidden
                    {
                        IEnumerable<string> rateLimitHeaders;
                        if (response.Headers.TryGetValues("X-RateLimit-Remaining", out rateLimitHeaders) &&
                            int.TryParse(rateLimitHeaders.FirstOrDefault(), out int remaining) && remaining == 0)
                        {
                            if (response.Headers.TryGetValues("X-RateLimit-Reset", out var resetValues))
                            {
                                long resetTimeUnix = long.Parse(resetValues.FirstOrDefault() ?? "0");
                                DateTimeOffset resetTime = DateTimeOffset.FromUnixTimeSeconds(resetTimeUnix);
                                TimeSpan waitTime = resetTime - DateTimeOffset.UtcNow;

                                Console.WriteLine($"Rate limit reached. Waiting until {resetTime}...");
                                await Task.Delay(waitTime);
                                continue;
                            }
                        }
                        else
                        {
                            Console.WriteLine($"Forbidden (403): Check your token permissions.");
                            break;
                        }
                    }
                    else
                    {
                        Console.WriteLine($"Error {statusCode}: {response.ReasonPhrase}");
                        break;
                    }
                }

                string responseBody = await response.Content.ReadAsStringAsync();
                var searchResponse = JsonConvert.DeserializeObject<SearchResponse>(responseBody);

                if (searchResponse?.Items == null || searchResponse.Items.Count == 0)
                {
                    break;
                }

                allResults.AddRange(searchResponse.Items);

                if (searchResponse.Items.Count < perPage)
                {
                    break;
                }

                page++;
            }
        }

        return allResults;
    }

    /// <summary>
    /// Writes search results to an Excel file.
    /// </summary>
    static void WriteResultsToExcel(List<SearchResultWithId> results, string outputFilePath)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("GitHub Results");

            worksheet.Cells[1, 1].Value = "Search ID";
            worksheet.Cells[1, 2].Value = "Repository";
            worksheet.Cells[1, 3].Value = "File Path";
            worksheet.Cells[1, 4].Value = "URL";

            for (int i = 0; i < results.Count; i++)
            {
                var result = results[i];
                worksheet.Cells[i + 2, 1].Value = result.Id;
                worksheet.Cells[i + 2, 2].Value = result.Repository.FullName;
                worksheet.Cells[i + 2, 3].Value = result.Path;
                worksheet.Cells[i + 2, 4].Value = result.Url;
            }

            package.SaveAs(new FileInfo(outputFilePath));
        }
    }
}

// Supporting Classes
class SearchResponse { [JsonProperty("items")] public List<SearchResult> Items { get; set; } }
class SearchResult { public Repository Repository { get; set; } public string Path { get; set; } public string Url { get; set; } }
class Repository { public string FullName { get; set; } }
class SearchResultWithId { public string Id { get; set; } public Repository Repository { get; set; } public string Path { get; set; } public string Url { get; set; } }
